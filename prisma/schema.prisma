// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  waitlistEntry WaitlistEntry?
  healthProfile HealthProfile?
  medications   Medication[]
  symptoms      SymptomRecord[]
  chatSessions  ChatSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  reason    String?
  role      String?
  status    WaitlistStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
}

model HealthProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  dateOfBirth       DateTime?
  gender            String?
  height            Float?
  weight            Float?
  allergies         String[]
  chronicConditions String[]
  familyHistory     String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Medication {
  id          String   @id @default(cuid())
  userId      String
  name        String
  dosage      String
  frequency   String
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SymptomRecord {
  id          String   @id @default(cuid())
  userId      String
  symptom     String
  severity    Int      // 1-10 scale
  date        DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id            String   @id @default(cuid())
  chatSessionId String
  role          String   // 'user' or 'assistant'
  content       String   @db.Text
  createdAt     DateTime @default(now())
  
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  DOCTOR
  ADMIN
}

enum WaitlistStatus {
  PENDING
  APPROVED
  REJECTED
}

